services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: survey-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "5432:5432"
    restart: unless-stopped

  backup:
    build:
      context: ./backup
    env_file:
      - .env
    volumes:
      - ../backup-db:/var/backup
    depends_on:
      - db
    networks:
      - backend
    entrypoint: >
      /bin/bash -c "apt-get update &&
      apt-get install -y cron &&
      echo '*/2 * * * * /usr/local/bin/backup.sh >> /var/log/cron.log 2>&1' > /etc/cron.d/backup-cron &&
      chmod 0644 /etc/cron.d/backup-cron &&
      crontab /etc/cron.d/backup-cron &&
      touch /var/log/cron.log &&
      cron && tail -f /var/log/cron.log"

  # Load Balancer using HAProxy
  haproxy:
    build:
      context: ./haproxy
    container_name: haproxy
    ports:
      - "8080:8080"
      - "8404:8404"
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Go API App Instance 1
  app1:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: go-api-1
    env_file:
      - .env.migrator
    expose:
      - "8080"
    networks:
      - frontend
      - backend
    restart: unless-stopped
    command: ${DOCKER_CMD}
    volumes:
      - .:/app

  # Go API App Instance 2
  app2:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: go-api-2
    env_file:
      - .env
    expose:
      - "8080"
    networks:
      - frontend
      - backend
    restart: unless-stopped
    command: ${DOCKER_CMD}
    volumes:
      - .:/app

  # Go API App Instance 3
  app3:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: go-api-3
    env_file:
      - .env
    expose:
      - "8080"
    networks:
      - frontend
      - backend
    restart: unless-stopped
    command: ${DOCKER_CMD}
    volumes:
      - .:/app

# Named volumes
volumes:
  pgdata:

# Networks
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
