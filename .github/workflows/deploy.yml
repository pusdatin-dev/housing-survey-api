name: üöÄ Deploy to Housing Survey Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Setup SSH key from base64 secret
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY_B64 }}" | base64 -d > ~/.ssh/deploy_key
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY_B64 }}"
          echo ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          unset SSH_AUTH_SOCK  # Prevent GitHub Actions SSH agent interference
          echo "üîé Adding server to known_hosts..."
          ssh-keyscan -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: üîç Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo '‚úÖ SSH connection successful'"

      - name: üîÅ Rsync project files to server
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -p ${{ secrets.DEPLOY_PORT }}" \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: üöÄ Restart Docker Compose with graceful shutdown
        run: |
          ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'bash -s' << 'EOF'
            set -e
            cd ${{ secrets.DEPLOY_PATH }}

            echo "[1/3] Gracefully stopping existing containers..."
            docker compose down --remove-orphans

            echo "[2/3] Starting containers..."
            docker compose up --build -d

            echo "[3/3] Waiting for app health check..."
            for i in {1..10}; do
              if curl -s --fail http://localhost:8080/health > /dev/null; then
                echo "‚úÖ App healthy after deploy"
                exit 0
              fi
              echo "Waiting for app to be healthy ($i)..."
              sleep 3
            done

            echo "‚ùå App failed health check after deploy"
            docker compose logs
            exit 1
          EOF
